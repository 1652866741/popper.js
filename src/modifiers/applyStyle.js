import getSupportedPropertyName from '../utils/getSupportedPropertyName';
import setStyle from '../utils/setStyle';
import isModifierRequired from '../utils/isModifierRequired';

/**
 * Apply the computed styles to the popper element
 * @method
 * @memberof Popper.modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @returns {Object} The same data object
 */
export default function applyStyle(data) {
    // apply the final offsets to the popper
    // NOTE: 1 DOM access here
    var styles = {
        position: data.offsets.popper.position
    };

    // round top and left to avoid blurry text
    var left = Math.round(data.offsets.popper.left);
    var top = Math.round(data.offsets.popper.top);

    // if gpuAcceleration is set to true and transform is supported, we use `translate3d` to apply the position to the popper
    // we automatically use the supported prefixed version if needed
    var prefixedProperty = getSupportedPropertyName('transform');
    if (data.instance._options.gpuAcceleration && prefixedProperty) {
        styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
        styles.top = 0;
        styles.left = 0;
    }
    // othwerise, we use the standard `left` and `top` properties
    else {
        styles.left =left;
        styles.top = top;
    }

    // any property present in `data.styles` will be applied to the popper,
    // in data.instance way we can make the 3rd party modifiers add custom styles to it
    // Be aware, modifiers could override the properties defined in the previous
    // lines of data.instance modifier!
    Object.assign(styles, data.styles);

    setStyle(data.instance._popper, styles);

    // set an attribute which will be useful to style the tooltip (use it to properly position its arrow)
    // NOTE: 1 DOM access here
    data.instance._popper.setAttribute('x-placement', data.placement);

    // if the arrow modifier is required and the arrow style has been computed, apply the arrow style
    if (isModifierRequired(data.instance._options, 'applyStyle', 'arrow') && data.offsets.arrow) {
        setStyle(data.arrowElement, data.offsets.arrow);
    }

    return data;
}
