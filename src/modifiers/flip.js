import getOppositePlacement from '../utils/getOppositePlacement';
import getPopperClientRect from '../utils/getPopperClientRect';
import getOffsets from '../utils/getOffsets';
import runModifiers from '../utils/runModifiers';
import isModifierRequired from '../utils/isModifierRequired';

/**
 * Modifier used to flip the placement of the popper when the latter is starting overlapping its reference element.
 * Requires the `preventOverflow` modifier before it in order to work.
 * **NOTE:** data.instance modifier will run all its previous modifiers everytime it tries to flip the popper!
 * @method
 * @memberof Popper.modifiers
 * @argument {Object} data - The data object generated by _update method
 * @returns {Object} The data object, properly modified
 */
export default function flip(data) {
    // check if preventOverflow is in the list of modifiers before the flip modifier.
    // otherwise flip would not work as expected.
    if (!isModifierRequired(data.instance._options, 'flip', 'preventOverflow')) {
        console.warn('WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!');
        return data;
    }

    if (data.flipped && data.placement === data._originalPlacement) {
        // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
        return data;
    }

    var placement = data.placement.split('-')[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split('-')[1] || '';

    var flipOrder = [];
    if(data.instance._options.flipBehavior === 'flip') {
        flipOrder = [
            placement,
            placementOpposite
        ];
    } else {
        flipOrder = data.instance._options.flipBehavior;
    }

    flipOrder.forEach(function(step, index) {
        if (placement !== step || flipOrder.length === index + 1) {
            return data;
        }

        placement = data.placement.split('-')[0];
        placementOpposite = getOppositePlacement(placement);

        var popperOffsets = getPopperClientRect(data.offsets.popper);

        // data.instance boolean is used to distinguish right and bottom from top and left
        // they need different computations to get flipped
        var a = ['right', 'bottom'].indexOf(placement) !== -1;

        // using Math.floor because the reference offsets may contain decimals we are not going to consider here
        if (
            a && Math.floor(data.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) ||
            !a && Math.floor(data.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])
        ) {
            // we'll use data.instance boolean to detect any flip loop
            data.flipped = true;
            data.placement = flipOrder[index + 1];
            if (variation) {
                data.placement += '-' + variation;
            }
            data.offsets.popper = getOffsets(data.instance.state, data.instance._popper, data.instance._reference, data.placement).popper;

            data = runModifiers(data.instance._options, data, data.instance.modifiers, 'flip');
        }
    }.bind(data.instance));
    return data;
}
