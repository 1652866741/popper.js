import getPopperClientRect from '../utils/getPopperClientRect';

/**
 * Modifier used to make sure the popper does not overflows from it's boundaries
 * @method
 * @memberof Popper.modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
export default function preventOverflow(data, options) {
    const order = options.priority;
    const popper = getPopperClientRect(data.offsets.popper);

    const check = {
        left() {
            let left = popper.left;
            if (popper.left < data.boundaries.left) {
                left = Math.max(popper.left, data.boundaries.left);
            }
            return { left: left };
        },
        right() {
            let left = popper.left;
            if (popper.right > data.boundaries.right) {
                left = Math.min(popper.left, data.boundaries.right - popper.width);
            }
            return { left: left };
        },
        top() {
            let top = popper.top;
            if (popper.top < data.boundaries.top) {
                top = Math.max(popper.top, data.boundaries.top);
            }
            return { top: top };
        },
        bottom() {
            let top = popper.top;
            if (popper.bottom > data.boundaries.bottom) {
                top = Math.min(popper.top, data.boundaries.bottom - popper.height);
            }
            return { top: top };
        }
    };

    order.forEach((direction) => {
        data.offsets.popper = Object.assign(popper, check[direction]());
    });

    return data;
}
