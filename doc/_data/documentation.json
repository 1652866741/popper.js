{
    "classes": [
        {
            "name": "Popper",
            "description": "",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Popper",
                "description": "Create a new Popper.js instance",
                "parameters": [
                    {
                        "name": "reference",
                        "type": [
                            "HTMLElement"
                        ],
                        "description": "The reference element used to position the popper",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "popper",
                        "type": [
                            "HTMLElement"
                        ],
                        "description": "The HTML element used as popper.",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "options",
                        "type": [
                            "Object"
                        ],
                        "description": "",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "options.placement",
                        "type": [
                            "String"
                        ],
                        "description": "Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -right),\n     left(-start, -end)`",
                        "default": "bottom",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.gpuAcceleration",
                        "type": [
                            "Boolean"
                        ],
                        "description": "When this property is set to true, the popper position will be applied using CSS3 translate3d, allowing the\n     browser to use the GPU to accelerate the rendering.\n     If set to false, the popper will be placed using `top` and `left` properties, not using the GPU.",
                        "default": "true",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.boundariesElement",
                        "type": [
                            "String",
                            "Element"
                        ],
                        "description": "The element which will define the boundaries of the popper position, the popper will never be placed outside\n     of the defined boundaries (except if `keepTogether` is enabled)",
                        "default": "'viewport'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.boundariesPadding",
                        "type": [
                            "Number"
                        ],
                        "description": "Additional padding for the boundaries",
                        "default": "5",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.removeOnDestroy",
                        "type": [
                            "Boolean"
                        ],
                        "description": "Set to true if you want to automatically remove the popper when you call the `destroy` method.",
                        "default": "false",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers",
                        "type": [
                            "Object"
                        ],
                        "description": "List of functions used to modify the data before they are applied to the popper (see source code for default values)",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.arrow",
                        "type": [
                            "Object"
                        ],
                        "description": "Arrow modifier configuration",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.arrow.element",
                        "type": [
                            "HTMLElement",
                            "String"
                        ],
                        "description": "The DOM Node used as arrow for the popper, or a CSS selector used to get the DOM node. It must be child of\n     its parent Popper. Popper.js will apply to the given element the style required to align the arrow with its\n     reference element.\n     By default, it will look for a child node of the popper with the `x-arrow` attribute.",
                        "default": "'[x-arrow]'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.offset",
                        "type": [
                            "Object"
                        ],
                        "description": "Offset modifier configuration",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.offset.offset",
                        "type": [
                            "Number"
                        ],
                        "description": "Amount of pixels the popper will be shifted (can be negative).",
                        "default": "0",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.preventOverflow",
                        "type": [
                            "Object"
                        ],
                        "description": "PreventOverflow modifier configuration",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.preventOverflow.priority",
                        "type": [
                            "Array"
                        ],
                        "description": "Priority used when Popper.js tries to avoid overflows from the boundaries, they will be checked in order,\n     this means that the last one will never overflow",
                        "default": "['left', 'right', 'top', 'bottom']",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.flip",
                        "type": [
                            "Object"
                        ],
                        "description": "Flip modifier configuration",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers.flip.behavior",
                        "type": [
                            "String",
                            "Array"
                        ],
                        "description": "The behavior used by the `flip` modifier to change the placement of the popper when the latter is trying to\n     overlap its reference element. Defining `flip` as value, the placement will be flipped on\n     its axis (`right - left`, `top - bottom`).\n     You can even pass an array of placements (eg: `['right', 'left', 'top']` ) to manually specify\n     how alter the placement when a flip is needed. (eg. in the above example, it would first flip from right to left,\n     then, if even in its new placement, the popper is overlapping its reference element, it will be moved to top)",
                        "default": "'flip'",
                        "optional": true,
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "namespaces": [
                {
                    "name": "Utils",
                    "description": "",
                    "access": "",
                    "virtual": false,
                    "functions": [
                        {
                            "name": "findIndex",
                            "access": "",
                            "virtual": false,
                            "description": "Return the index of the matching object",
                            "parameters": [
                                {
                                    "name": "arr",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "prop",
                                    "type": [],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "value",
                                    "type": [],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [],
                                "description": "index or -1"
                            }
                        },
                        {
                            "name": "getOffsetParent",
                            "access": "",
                            "virtual": false,
                            "description": "Returns the offset parent of the given element",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Element"
                                ],
                                "description": "offset parent"
                            }
                        },
                        {
                            "name": "getStyleComputedProperty",
                            "access": "",
                            "virtual": false,
                            "description": "Get CSS computed property of the given element",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Eement"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "property",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": []
                        },
                        {
                            "name": "getScrollParent",
                            "access": "",
                            "virtual": false,
                            "description": "Returns the scrolling parent of the given element",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Element"
                                ],
                                "description": "offset parent"
                            }
                        },
                        {
                            "name": "getOffsetRect",
                            "access": "",
                            "virtual": false,
                            "description": "Get the position of the given element, relative to its offset parent",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "position - Coordinates of the element and its `scrollTop`"
                            }
                        },
                        {
                            "name": "getBoundaries",
                            "access": "",
                            "virtual": false,
                            "description": "Computed the boundaries limits and return them",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "Object containing the property \"offsets\" generated by `_getOffsets`",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "padding",
                                    "type": [
                                        "Number"
                                    ],
                                    "description": "Boundaries padding",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "boundariesElement",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "Element used to define the boundaries",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "Coordinates of the boundaries"
                            }
                        },
                        {
                            "name": "getBoundingClientRect",
                            "access": "",
                            "virtual": false,
                            "description": "Get bounding client rect of given element",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "HTMLElement"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "client rect"
                            }
                        },
                        {
                            "name": "getOffsetRectRelativeToCustomParent",
                            "access": "",
                            "virtual": false,
                            "description": "Given an element and one of its parents, return the offset",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "HTMLElement"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "parent",
                                    "type": [
                                        "HTMLElement"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "rect"
                            }
                        },
                        {
                            "name": "getOuterSizes",
                            "access": "",
                            "virtual": false,
                            "description": "Get the outer sizes of the given element (offset size + margins)",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "object containing width and height properties"
                            }
                        },
                        {
                            "name": "getPopperClientRect",
                            "access": "",
                            "virtual": false,
                            "description": "Given the popper offsets, generate an output similar to getBoundingClientRect",
                            "parameters": [
                                {
                                    "name": "popperOffsets",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "ClientRect like output"
                            }
                        },
                        {
                            "name": "isFixed",
                            "access": "",
                            "virtual": false,
                            "description": "Check if the given element is fixed or is inside a fixed parent",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "customContainer",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Boolean"
                                ],
                                "description": "answer to \"isFixed?\""
                            }
                        },
                        {
                            "name": "getPosition",
                            "access": "",
                            "virtual": false,
                            "description": "Helper used to get the position which will be applied to the popper",
                            "parameters": [
                                {
                                    "name": "config",
                                    "type": [
                                        "HTMLElement"
                                    ],
                                    "description": "popper element",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "HTMLElement"
                                ],
                                "description": "reference element"
                            }
                        },
                        {
                            "name": "getSupportedPropertyName",
                            "access": "",
                            "virtual": false,
                            "description": "Get the prefixed supported property name",
                            "parameters": [
                                {
                                    "name": "property",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "(camelCase)",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "String"
                                ],
                                "description": "prefixed property (camelCase)"
                            }
                        },
                        {
                            "name": "isFunction",
                            "access": "",
                            "virtual": false,
                            "description": "Check if the given variable is a function",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "Element to check",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Boolean"
                                ],
                                "description": "answer to: is a function?"
                            }
                        },
                        {
                            "name": "isModifierRequired",
                            "access": "",
                            "virtual": false,
                            "description": "Helper used to know if the given modifier depends from another one.",
                            "parameters": [],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Boolean"
                                ],
                                "description": ""
                            }
                        },
                        {
                            "name": "isNumeric",
                            "access": "",
                            "virtual": false,
                            "description": "Tells if a given input is a number",
                            "parameters": [
                                {
                                    "name": "input",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "to check",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Boolean"
                                ],
                                "description": ""
                            }
                        },
                        {
                            "name": "isTransformed",
                            "access": "",
                            "virtual": false,
                            "description": "Check if the given element has transforms applied to itself or a parent",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Boolean"
                                ],
                                "description": "answer to \"isTransformed?\""
                            }
                        },
                        {
                            "name": "runModifiers",
                            "access": "",
                            "virtual": false,
                            "description": "Loop trough the list of modifiers and run them in order, each of them will then edit the data object",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "modifiers",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "ends",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": []
                        },
                        {
                            "name": "setStyle",
                            "access": "",
                            "virtual": false,
                            "description": "Set the style to the given popper",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "Element to apply the style to",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "styles",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "Object with a list of properties and values which will be applied to the element",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": []
                        },
                        {
                            "name": "getOffsets",
                            "access": "",
                            "virtual": false,
                            "description": "Get offsets to the popper",
                            "parameters": [
                                {
                                    "name": "popper",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "the popper element",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                },
                                {
                                    "name": "reference",
                                    "type": [
                                        "Element"
                                    ],
                                    "description": "the reference element (the popper will be relative to this)",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "An object containing the offsets which will be applied to the popper"
                            }
                        },
                        {
                            "name": "setupEventListeners",
                            "access": "private",
                            "virtual": false,
                            "description": "Setup needed event listeners used to update the popper position",
                            "parameters": [],
                            "examples": []
                        },
                        {
                            "name": "removeEventListeners",
                            "access": "private",
                            "virtual": false,
                            "description": "Remove event listeners used to update the popper position",
                            "parameters": [],
                            "examples": []
                        },
                        {
                            "name": "sortModifiers",
                            "access": "",
                            "virtual": false,
                            "description": "Sorts the modifiers based on their `order` property",
                            "parameters": [],
                            "examples": []
                        },
                        {
                            "name": "getOppositePlacement",
                            "access": "",
                            "virtual": false,
                            "description": "Get the opposite placement of the given one/",
                            "parameters": [
                                {
                                    "name": "placement",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "String"
                                ],
                                "description": "flipped placement"
                            }
                        }
                    ]
                }
            ],
            "functions": [
                {
                    "name": "update",
                    "access": "",
                    "virtual": false,
                    "description": "Updates the position of the popper, computing the new offsets and applying the new style",
                    "parameters": [
                        {
                            "name": "isFirstCall",
                            "type": [
                                "Boolean"
                            ],
                            "description": "When true, the onCreate callback is called, otherwise it calls the onUpdate callback",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "onCreate",
                    "access": "",
                    "virtual": false,
                    "description": "If a function is passed, it will be executed after the initialization of popper with as first argument the Popper instance.",
                    "parameters": [
                        {
                            "name": "callback",
                            "type": [
                                "function"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "onUpdate",
                    "access": "",
                    "virtual": false,
                    "description": "If a function is passed, it will be executed after each update of popper with as first argument the set of coordinates and informations\nused to style popper and its arrow.\nNOTE: it doesn't get fired on the first call of the `Popper.update()` method inside the `Popper` constructor!",
                    "parameters": [
                        {
                            "name": "callback",
                            "type": [
                                "function"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "destroy",
                    "access": "",
                    "virtual": false,
                    "description": "Destroy the popper",
                    "parameters": [],
                    "examples": []
                }
            ]
        }
    ]
}